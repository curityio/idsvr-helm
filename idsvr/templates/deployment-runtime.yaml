{{- $root := . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "curity.fullname" . }}-runtime
  labels:
    {{- include "curity.labels" . | nindent 4 }}
    role: {{ include "curity.fullname" . }}-runtime
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "curity.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        {{- include "curity.labels" . | nindent 8 }}
        role: {{ include "curity.fullname" . }}-runtime
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: {{ include "curity.metricsPort" . | quote }}
    spec:
{{- if .Values.openshift.serviceCerts.runtime.create }}
      initContainers:
        - name: {{ .Chart.Name }}-keystore
          image: "{{ .Values.openshift.serviceCerts.image.repository }}:{{ .Values.openshift.serviceCerts.image.tag }}"
          env:
            - name: keyfile
              value: /var/run/secrets/openshift.io/services_serving_certs/tls.key
            - name: crtfile
              value: /var/run/secrets/openshift.io/services_serving_certs/tls.crt
            - name: keystore_pkcs12
              value: /var/run/secrets/java.io/keystores/keystore.pkcs12
            - name: keystore_jks
              value: /var/run/secrets/java.io/keystores/keystore.jks
            - name: password
              valueFrom:
                secretKeyRef:
                  name: {{ include "curity.fullname" . }}
                  key: KEYSTORE_PASSWORD
          command: ['/bin/bash']
          args: ['-c', "openssl pkcs12 -export -inkey $keyfile -in $crtfile -out $keystore_pkcs12 -password pass:$password && keytool -importkeystore -noprompt -srckeystore $keystore_pkcs12 -srcstoretype pkcs12 -destkeystore $keystore_jks -storepass $password -srcstorepass $password"]
          volumeMounts:
            - name: keystore-volume
              mountPath: /var/run/secrets/java.io/keystores
            - name: service-certs
              mountPath: /var/run/secrets/openshift.io/services_serving_certs
              readOnly: true
        - name: {{ .Chart.Name }}-truststore
          image: redhat-openjdk-18/openjdk18-openshift
          env:
            - name: ca_bundle
              value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
            - name: truststore_jks
              value: /var/run/secrets/java.io/keystores/truststore.jks
          command: ['/bin/bash']
          args: ['-c', "csplit -z -f crt- $ca_bundle '/-----BEGIN CERTIFICATE-----/' '{*}' && for file in crt-*; do keytool -list -keystore $truststore_jks -alias service-$file -storepass changeit > /dev/null 2>&1 || keytool -import -noprompt -keystore $truststore_jks -file $file -storepass changeit -alias service-$file; done && keytool -importkeystore -noprompt -srckeystore  /etc/alternatives/jre/lib/security/cacerts -srcstorepass changeit -destkeystore $truststore_jks -deststorepass changeit"]
          volumeMounts:
            - name: keystore-volume
              mountPath: /var/run/secrets/java.io/keystores
{{- end }}
      containers:
        - name: {{ .Chart.Name }}-runtime
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/opt/idsvr/bin/idsvr"]
          args: ["-s", "{{ .Values.curity.runtime.role }}",
                 {{- if .Values.curity.config.encryptionKey}}"-e","{{.Values.curity.config.encryptionKey}}",{{end -}}
                 "--no-admin"]
          env:
            - name: STATUS_CMD_PORT
              value: {{ .Values.curity.healthCheckPort | quote }}
          {{- if .Values.curity.config.environmentVariableSecret }}
          envFrom:
            - secretRef:
                name: {{ .Values.curity.config.environmentVariableSecret | quote }}
          {{- end }}
          ports:
            - name: http-port
              containerPort: {{ .Values.curity.runtime.service.port }}
              protocol: TCP
            - name: health-check
              containerPort: {{ .Values.curity.healthCheckPort }}
              protocol: TCP
            - name: metrics
              containerPort: {{ include "curity.metricsPort" . }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: health-check
            timeoutSeconds:  {{ .Values.curity.runtime.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.curity.runtime.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.curity.runtime.livenessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.curity.runtime.livenessProbe.initialDelaySeconds }}
          readinessProbe:
            httpGet:
              path: /
              port: health-check
            timeoutSeconds:  {{ .Values.curity.runtime.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.curity.runtime.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.curity.runtime.readinessProbe.successThreshold }}
            periodSeconds: {{ .Values.curity.runtime.readinessProbe.periodSeconds }}
            initialDelaySeconds: {{ .Values.curity.runtime.readinessProbe.initialDelaySeconds }}
          volumeMounts:
            {{- if .Values.curity.runtime.logging.stdout }}
            - mountPath: /opt/idsvr/var/log/
              name: log-volume
            {{- end }}
            - mountPath: /opt/idsvr/etc/init/cluster.xml
              subPath: cluster.xml
              name: cluster-xml
              readOnly: true
            {{- if .Values.curity.config.configurationSecret }}
            - mountPath: /opt/idsvr/etc/init/config.xml
              subPath: config.xml
              name: config
              readOnly: true
            {{- end }}
            {{- if .Values.curity.config.configurationConfigMap }}
            - mountPath: /opt/idsvr/etc/init/configmap-config.xml
              subPath: {{ required "\n curity.config.configurationConfigMapItemName required when curity.config.configurationConfigMap is set. " .Values.curity.config.configurationConfigMapItemName }}
              name: configmap-config
              readOnly: true
            {{- end }}
            {{- if .Values.openshift.serviceCerts.runtime.create }}
            - name: keystore-volume
              mountPath: /var/run/secrets/java.io/keystores
            {{- end }}
          resources:
                {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.curity.runtime.logging.stdout }}
        {{- range .Values.curity.runtime.logging.logs }}
        - name: {{ . }}
          image: {{ $root.Values.curity.runtime.logging.image }}
          command:
            - "tail"
            - "-F"
            - "/log/{{ . | lower }}.log"
          volumeMounts:
            - name: log-volume
              mountPath: /log
              readOnly: true
        {{- end }}
        {{- end }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret}}
      {{- end }}
      volumes:
        {{- if .Values.curity.runtime.logging.stdout }}
        - name: log-volume
          emptyDir: {}
        {{- end }}
        - name: cluster-xml
          secret:
            secretName: {{ include "curity.fullname" . }}-cluster-config-xml
            items:
              - key: cluster-{{ .Release.Revision }}.xml
                path: cluster.xml
        {{- if .Values.curity.config.configurationSecret }}
        - name: config
          secret:
            secretName: {{ .Values.curity.config.configurationSecret }}
            items:
              - key: {{ required "\n curity.config.configurationSecretItemName required when curity.config.configurationSecret is set. " .Values.curity.config.configurationSecretItemName }}
                path: config.xml
        {{- end }}
        {{- if .Values.curity.config.configurationConfigMap }}
        - name: configmap-config
          configMap:
            name: {{ .Values.curity.config.configurationConfigMap }}
        {{- end }}
        {{- if .Values.openshift.serviceCerts.runtime.create }}
        - name: keystore-volume
          emptyDir: {}
        - name: service-certs
          secret:
            secretName: {{ include "curity.fullname" . }}-runtime-svc-service-certs
        {{- end }}
            {{- with .Values.nodeSelector }}
      nodeSelector:
            {{- toYaml . | nindent 8 }}
            {{- end }}
            {{- with .Values.affinity }}
      affinity:
            {{- toYaml . | nindent 8 }}
            {{- end }}
            {{- with .Values.tolerations }}
      tolerations:
            {{- toYaml . | nindent 8 }}
        {{- end }}
